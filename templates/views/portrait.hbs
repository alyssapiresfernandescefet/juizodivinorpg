<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Portrait</title>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script src="/socket.io/socket.io.js"></script>
    <script>const socket = io(); socket.emit('room:join', 'portrait' + '{{playerID}}');</script>

    <style>
        @font-face {
            font-family: bebas-neue-pro;
            src: url(/assets/portrait_font.otf);
            font-weight: bolder;
            font-style: normal;
        }

        body {
            background-color: transparent;
            font-family: bebas-neue-pro, sans-serif;
        }

        .popout {
            animation: popout 1s ease;
            -webkit-animation: popout 1s ease;
        }

        @keyframes popout {
            from {
                transform: scale(0)
            }

            80% {
                transform: scale(1.2)
            }

            to {
                transform: scale(1)
            }
        }

        @-webkit-keyframes popout {
            from {
                -webkit-transform: scale(0)
            }

            80% {
                -webkit-transform: scale(1.2)
            }

            to {
                -webkit-transform: scale(1)
            }
        }

        .container .main,
        .container .text div {
            position: absolute;
        }

        .container .main {
            top: -70px;
            left: 0px;
        }

        img {
            height: 500px;
            position: absolute;
        }

        .top {
            z-index: -998;
        }

        .middle {
            z-index: -999;
        }

        .bottom {
            z-index: -1000;
        }

        .name {
            left: 305px;
            top: 110px;

            line-height: 100%;

            max-width: 350px;

            color: white;

            font-size: 84px;
            font-style: italic;

            text-shadow: 4px 4px 0px rgba(0, 0, 0, 0.75);
        }

        .health,
        .sanity {
            left: 305px;
            font-size: 96px;
            font-style: italic;
            max-width: 250px;
            color: white;
        }

        .health {
            top: 80px;
            text-shadow: 0 0 10px #df3d60b7, 0 0 30px #df3d60b7, 0 0 50px #df3d60;
        }

        .sanity {
            top: 180px;
            text-shadow: 0 0 10px #7f3ddfb7, 0 0 30px #7f3ddfb7, 0 0 50px #7e3ddf;
        }

        .energy {
            top: 100%;
            left: 35%;
            transform: translate(-50%, -50%);

            color: #27ffbe;

            font-size: 56px;
            text-shadow: 0 0 20px #00FFFEb7, 0 0 50px #00ffff;
        }

        .result {
            font-size: 56px;
            color: white;
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
        }

        .description {
            font-size: 28px;
            color: white;
            position: absolute;
            top: 90%;
            left: 50%;
            transform: translate(-50%, -50%);
        }
    </style>
</head>

<body>
    <div class="container">
        <div class="main">
            <img src="/assets/avatar_bg.png" class="bottom">

            <img src="/assets/frame_upside.png" class="bottom">

            {{! TODO: set avatar}}
            <img id="avatar" class="middle">

            <img src="/assets/frame_bottom.png" class="top">
            <div class="energy-container" style=" width: 250px; height: 400px;">
                <img src="/assets/energy_placeholder.png" class="top" style="height: 400px; top: 75px; left: 25px;">
                <div class="text">
                    <div class="energy top">{{attributes.2.value}}</div>
                </div>
            </div>
        </div>
    </div>

    <div class="container switchable">
        <div id="idleText" class="text">
            <div class="name top">{{name}}</div>
        </div>
        <div id="combatText" class="text" style="display: none;">
            <div class="health top">{{attributes.0.value}}/{{attributes.0.total_value}}</div>
            <div class="sanity top">{{attributes.1.value}}/{{attributes.1.total_value}}</div>
        </div>
    </div>

    <div class="container">
        <div class="main" style="top: 252px; left: 150px;">
            <div class="dice">
                <video height="150" style="display: none;" muted>
                    <source src="/assets/dice_animation.webm">
                </video>
                <div class="result" style="display: none;">18</div>
                <div class="description" style="display: none;">Sucesso</div>
            </div>
        </div>
    </div>

    <script>
        const attributes = {
            '1': $('.health'),
            '2': $('.sanity'),
            '3': $('.energy')
        };

        const statusState = {
            {{#each attribute_status}}
            '{{attribute_status_id}}': {{value}},
            {{/each}}
        };


        socket.on('environment change', data => {
            const timeout = 100;
            $('.container.switchable .text').fadeOut(timeout);
            setTimeout(() => {
                switch (data.mode) {
                    case 'idle':
                        $('#idleText').fadeIn(timeout);
                        break;
                    case 'combat':
                        $('#combatText').fadeIn(timeout);
                        break;
                }
            }, timeout);
        });

        socket.on('attribute changed', content => {
            let attrID = content.attrID;
            let newValue = content.value;
            let newTotalValue = content.totalValue;
            let newText = `${newValue}`;
            if (attrID !== '3') newText += `/${newTotalValue}`;
            attributes[attrID].text(newText);
        });

        socket.on('attribute status changed', content => {
            const id = content.attrStatusID;
            statusState[id] = content.value;
            evaluateAvatar();
        });

        const $dice = $('.dice video');
        const $result = $('.dice .result');
        const $description = $('.dice .description');
        const $avatar = $('#avatar');

        const queue = [];
        let showingDice = false;
        let showingResult = false;

        socket.on('dice roll', onDiceRoll);
        socket.on('dice result', onDiceResult);

        function onDiceRoll() {
            if (showingDice) return;
            showDice();
        }

        function onDiceResult(data) {
            if (showingResult) return queue.push(data);

            if (!showingDice) {
                showDice();
                return setTimeout(() => onDiceResult(data), 1500);
            }

            const roll = data.results[0].roll;
            const successType = data.results[0].successType.description;

            $result.text(roll).fadeIn('fast', () => $description.text(successType).fadeIn('fast'));
            showingResult = true;

            setTimeout(() => {
                $description.fadeOut('fast', () => $description.text(''));
                $result.fadeOut('fast', () => {
                    showingResult = false;
                    $result.text('');
                    showingDice = false;
                    $dice.fadeOut('fast', () => {
                        const next = queue.shift();
                        if (next) {
                            showDice();
                            setTimeout(() => onDiceResult(next), 1500);
                        }
                    });
                });
            }, 3000);
        }

        function showDice() {
            $dice[0].load();
            showingDice = true;
            $dice.fadeIn('fast', () => {
                $dice[0].play();
            });
        }

        function successTypeResolver(number, roll, showBranches) {
            let resolved;

            const f2 = Math.floor(number / 2);
            const f5 = Math.floor(number / 5);
            const f10 = Math.floor(number / 10);
            const f12 = Math.floor(number / 12);
            const f20 = Math.floor(number / 20);

            if (roll === 1 && number < 20)
                resolved = { description: 'Desastre!', isSuccess: false };

            else if (roll >= 1 && roll <= 20 - number)
                resolved = { description: 'Fracasso', isSuccess: false };

            else if (roll > 20 - number && roll <= 20 - f2)
                resolved = { description: 'Sucesso', isSuccess: true };

            else if (roll > 20 - f2 && roll <= 20 - f5)
                resolved = { description: 'Bom', isSuccess: true };

            else
                resolved = { description: 'Extremo', isSuccess: true };

            if (roll > 20 - f10 && roll <= 20 - f12)
                resolved = { description: "Crítico Normal", isSuccess: true };

            else if (roll > 20 - f12 && roll <= 20 - f20)
                resolved = { description: "Crítico Bom", isSuccess: true };

            else if (roll > 20 - f20 && number >= 30)
                resolved = { description: "Crítico Extremo", isSuccess: true };

            if (!showBranches)
                resolved.description = resolved.isSuccess ? 'Sucesso' : 'Fracasso';

            return resolved;
        }

        function evaluateAvatar() {
            for (const id in statusState) {
                if (statusState[id]) return $avatar.attr('src', `/avatar/${id}?v=${Date.now()}`)
            }
        }
        evaluateAvatar();
    </script>
</body>

</html>